<!DOCTYPE html>
<html>
<head>
    <% include ../partials/head %>
</head>
<style>
    .rcorners1 {
    border-radius: 10px;
    border: 20px solid #ffffff;
    }
</style>

<body style="background-color: #01607d">
<div class="col-md-12" style="margin-top: 6%">
    <table style="width: inherit">
        <tbody>
        <tr>
            <td style="width: 7%; text-align: center">
                <div>
                    <!--
                    <label>Player One</label>
                    <label id="playerOneName"></label>
                    -->
                    <label id="playerOneScoreLabel" style="text-align: center; font-size: xx-large">0</label>
                </div>

            </td>
            <td>
                <div id="canvasGame" style="text-align: center"></div>

            </td>
            <td style="width: 7%;">
                <div>
                    <!--
                    <label>Player Two</label>
                    <label id="playerTwoName"></label>
                    -->
                    <label id="playerTwoScoreLabel" style="text-align: center; font-size: xx-large">0</label>
                </div>
            </td>
        </tr>
        </tbody>
    </table>


</div>
</body>

<style>
    canvas {
        width: 1000px;
        height: 500px;
        background-color: white;
        Vertical-align: middle;
        border-radius: 10px;
        border: 20px solid #ffffff
    }
</style>

<body onload="startGame()">

<script>

    var playerOneScore = 0;
    var playerTwoScore = 0;

    function startGame() {
        myGameArea.start();
        PlayerOneRed = new component(30, 130, "black", 20, 200);
        PlayerTwoBlue = new component(30, 130, "black", 940, 200);
        TheBall = new component(20,20, 'black', 480, 230);
        TheBall.riktning = [0,1,0,0]; // vänster, höger, upp, ner
        Top = new component(1000, 5, "black", 0,0);
        Bottom = new component(1000, 5, "black", 0, 495 );
        Middle = new component(6, 25, "black", 497, 0);
        this.TheBall.speedX = 2;
    }

    var myGameArea = {
        canvas : document.createElement("canvas"),
        start : function() {
            this.pressedKeys = [];
            this.canvas.width = 1000;
            this.canvas.height = 500    ;
            this.context = this.canvas.getContext("2d");
            document.getElementById('canvasGame').appendChild(this.canvas);
            this.interval = setInterval(updateGameArea, 15);
            window.addEventListener('keydown', function (e) {
                myGameArea.keys = (myGameArea.keys || []);
                myGameArea.keys[e.keyCode] = true;
            })
            window.addEventListener('keyup', function (e) {
                myGameArea.keys[e.keyCode] = false;
            })
        },

        clear : function() {
            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        }
    }

    function component(width, height, color, x, y) {
        this.width = width;
        this.height = height;
        this.speedX = 0;
        this.speedY = 0;
        this.x = x;
        this.y = y;
        this.update = function(){
            ctx = myGameArea.context;
            ctx.fillStyle = color;
            ctx.fillRect(this.x, this.y, this.width, this.height);
        }
        this.updateCircle = function(){
            ctx = myGameArea.context;
            ctx.fillStyle = color;
            ctx.beginPath();
            ctx.arc(this.x+10,this.y+10,10,0*Math.PI,2*Math.PI);
            ctx.stroke();
            ctx.fill();
        }
        this.newPos = function() {
            this.x += this.speedX;
            this.y += this.speedY;
        }
    }

    function collisonTest2(rect1, rect2) {
        if (rect1.x < rect2.x + rect2.width &&
                rect1.x + rect1.width > rect2.x &&
                rect1.y < rect2.y + rect2.height &&
                rect1.height + rect1.y > rect2.y) {
            return true;
        }
    }

    function newDirection(rect1, rect2){  // rect2 ball
        if(collisonTest2(rect1, rect2)){
            var mid = rect2.y + rect2.height/2;
            var interval = rect1.height/5;
            if(mid < (rect1.y + interval) && mid > rect1.y){  //rect2.x
                reverseDirectionX(rect2);
                rect2.speedY = -2;
            }
            if(mid > (rect1.y +interval)  && mid < (rect1.y + interval*2)){
                reverseDirectionX(rect2);
                rect2.speedY = -1;
            }
            if(mid > (rect1.y + interval*2) && mid < (rect1.y + interval*3)){
                reverseDirectionX(rect2);
                rect2.speedY = 0;
            }
            if(mid > (rect1.y + interval*3) && mid < (rect1.y + interval*4)){
                reverseDirectionX(rect2);
                rect2.speedY = 1;
            }
            if(mid > (rect1.y + interval*4) && mid < (rect1.y +interval*5)){
                reverseDirectionX(rect2);
                rect2.speedY = 2;
            }
        }
    }

    function reverseAngel(rect){
        if(rect.speedY > 0){
            rect.speedY = rect.speedY *-1;
        }
        else{
            rect.speedY = rect.speedY *-1;
        }
    }

    function reverseDirectionX(rect){
        if(rect.speedX > 0 ){
            rect.speedX = rect.speedX * -1;
            if(rect.x > 500){
              rect.x = rect.x -10;
            }
            else if(rect.x < 500){
              rect.x = rect.x + 10;
            }
        }
        else{
            rect.speedX = rect.speedX * -1;
        }
    }

    function updateGameArea() {
        myGameArea.clear();
        PlayerOneRed.speedX = 0;
        PlayerOneRed.speedY = 0;
        PlayerTwoBlue.speedY = 0;
        PlayerTwoBlue.speedX = 0;

        if (myGameArea.keys && myGameArea.keys[38]) {PlayerTwoBlue.speedY = -2; }
        if (myGameArea.keys && myGameArea.keys[40]) {PlayerTwoBlue.speedY = 2; }
        if (myGameArea.keys && myGameArea.keys[87]) {PlayerOneRed.speedY = -2; }
        if (myGameArea.keys && myGameArea.keys[83]) {PlayerOneRed.speedY = 2; }


        if (collisonTest2(this.Top, this.TheBall)) {
            reverseAngel(this.TheBall);
        }
        if (collisonTest2(this.Bottom, this.TheBall)) {
            reverseAngel(this.TheBall);
        }

        if ((this.PlayerOneRed.y + this.PlayerOneRed.speedY) > 0 && (this.PlayerOneRed.y + this.PlayerOneRed.speedY) < 500 - 130
                && (this.PlayerOneRed.x + this.PlayerOneRed.speedX) > 0 && (this.PlayerOneRed.x + this.PlayerOneRed.speedX) < 400 ) {
            this.PlayerOneRed.newPos();
        }
        if ((this.PlayerTwoBlue.y + this.PlayerTwoBlue.speedY) > 0 && (this.PlayerTwoBlue.y + this.PlayerTwoBlue.speedY) < 500 - 130
                && (this.PlayerTwoBlue.x + this.PlayerTwoBlue.speedX) > 600 && (this.PlayerTwoBlue.x + this.PlayerTwoBlue.speedX) < 970) {
            this.PlayerTwoBlue.newPos();
        }
        this.TheBall.newPos();
        newDirection(this.PlayerOneRed, this.TheBall);
        newDirection(this.PlayerTwoBlue, this.TheBall);

        if (this.TheBall.x < 0) {
            this.TheBall.x = 480;
            this.TheBall.y = 230;
            this.TheBall.speedX = 2;
            playerOneScore++;
            console.log(playerOneScore);
            $('#playerOneScoreLabel').text(playerOneScore);
        }
        else if(this.TheBall.x > 1000){
            this.TheBall.x = 480;
            this.TheBall.y = 230;
            this.TheBall.speedX = 2;
            playerTwoScore++;
            console.log(playerTwoScore);
            $('#playerTwoScoreLabel').text(playerTwoScore);
        }
        TheBall.newPos();
        PlayerOneRed.update();
        PlayerTwoBlue.update();
        TheBall.updateCircle();
        Top.update();
        Bottom.update();
        for(var i=0; i<10; i++){
            Middle.update();
            Middle.y += 50;
        }
        Middle.y = 12;
    }

	//ladda upp

</script>

</html>
